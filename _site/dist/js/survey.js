const data = [{
  "name": "nine",
  "number": 10
}, {
  "name": "wax",
  "number": 15
}, {
  "name": "abaft",
  "number": 20
}, {
  "name": "shiver",
  "number": 25
}, {
  "name": "consist",
  "number": 30
}, {
  "name": "butter",
  "number": 35
}, {
  "name": "cup",
  "number": 40
}, {
  "name": "plausible",
  "number": 45
}, {
  "name": "delight",
  "number": 50
}, {
  "name": "stiff",
  "number": 2
}, {
  "name": "capable",
  "number": 3
}, {
  "name": "big",
  "number": 100
}, {
  "name": "way",
  "number": 88
}, {
  "name": "continue",
  "number": 63
}, {
  "name": "polish",
  "number": 42
}, {
  "name": "illegal",
  "number": 21
}, {
  "name": "drown",
  "number": 11
}, {
  "name": "scrape",
  "number": 96
}];
const template = document.createElement('template');
template.innerHTML = `
  <style>
  :host {
    display: block;
    contain: content;
  }

  ul {
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    line-height: 2.5rem;
    list-style: none;
    padding: 0;
  }
  
  li:nth-child(2n+1) {
    --color: #181;
  }

  li:nth-child(3n+1) {
    --color: #33a;
  }

  li:nth-child(4n+1) {
    --color: #c38;
  }

  li {
    --size: calc(var(--number) * 0.08rem);

    color: var(--color);
    line-height: var(--size);
    list-style: none;
    font-size: max( 1rem, var(--size));
    padding: 0.125rem 0.25rem;
  }
  
  

  </style>
  <ul>
    ${data.map(item => `<li data-number="${item.number}" style="--number:${item.number};">${item.name}</li>`).join('')}
  </ul >
  `;

class CorWordCloud extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({
      mode: 'open'
    });
    this.shadowRoot.appendChild(template.content.cloneNode(true));
  }

}

customElements.define('cor-word-cloud', CorWordCloud);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VydmV5LmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy93b3JkY2xvdWQvd29yZGNsb3VkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRhdGEgPVxyXG4gIFtcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwibmluZVwiLFxyXG4gICAgICBcIm51bWJlclwiOiAxMFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwid2F4XCIsXHJcbiAgICAgIFwibnVtYmVyXCI6IDE1XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJhYmFmdFwiLFxyXG4gICAgICBcIm51bWJlclwiOiAyMFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwic2hpdmVyXCIsXHJcbiAgICAgIFwibnVtYmVyXCI6IDI1XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJjb25zaXN0XCIsXHJcbiAgICAgIFwibnVtYmVyXCI6IDMwXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJidXR0ZXJcIixcclxuICAgICAgXCJudW1iZXJcIjogMzVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcImN1cFwiLFxyXG4gICAgICBcIm51bWJlclwiOiA0MFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwicGxhdXNpYmxlXCIsXHJcbiAgICAgIFwibnVtYmVyXCI6IDQ1XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJkZWxpZ2h0XCIsXHJcbiAgICAgIFwibnVtYmVyXCI6IDUwXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJzdGlmZlwiLFxyXG4gICAgICBcIm51bWJlclwiOiAyXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBcIm5hbWVcIjogXCJjYXBhYmxlXCIsXHJcbiAgICAgIFwibnVtYmVyXCI6IDNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcImJpZ1wiLFxyXG4gICAgICBcIm51bWJlclwiOiAxMDBcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcIndheVwiLFxyXG4gICAgICBcIm51bWJlclwiOiA4OFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwiY29udGludWVcIixcclxuICAgICAgXCJudW1iZXJcIjogNjNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcInBvbGlzaFwiLFxyXG4gICAgICBcIm51bWJlclwiOiA0MlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwiaWxsZWdhbFwiLFxyXG4gICAgICBcIm51bWJlclwiOiAyMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgXCJuYW1lXCI6IFwiZHJvd25cIixcclxuICAgICAgXCJudW1iZXJcIjogMTFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIFwibmFtZVwiOiBcInNjcmFwZVwiLFxyXG4gICAgICBcIm51bWJlclwiOiA5NlxyXG4gICAgfVxyXG4gIF07XHJcblxyXG5jb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XHJcbnRlbXBsYXRlLmlubmVySFRNTCA9IGBcclxuICA8c3R5bGU+XHJcbiAgOmhvc3Qge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBjb250YWluOiBjb250ZW50O1xyXG4gIH1cclxuXHJcbiAgdWwge1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGxpbmUtaGVpZ2h0OiAyLjVyZW07XHJcbiAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgcGFkZGluZzogMDtcclxuICB9XHJcbiAgXHJcbiAgbGk6bnRoLWNoaWxkKDJuKzEpIHtcclxuICAgIC0tY29sb3I6ICMxODE7XHJcbiAgfVxyXG5cclxuICBsaTpudGgtY2hpbGQoM24rMSkge1xyXG4gICAgLS1jb2xvcjogIzMzYTtcclxuICB9XHJcblxyXG4gIGxpOm50aC1jaGlsZCg0bisxKSB7XHJcbiAgICAtLWNvbG9yOiAjYzM4O1xyXG4gIH1cclxuXHJcbiAgbGkge1xyXG4gICAgLS1zaXplOiBjYWxjKHZhcigtLW51bWJlcikgKiAwLjA4cmVtKTtcclxuXHJcbiAgICBjb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgbGluZS1oZWlnaHQ6IHZhcigtLXNpemUpO1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgIGZvbnQtc2l6ZTogbWF4KCAxcmVtLCB2YXIoLS1zaXplKSk7XHJcbiAgICBwYWRkaW5nOiAwLjEyNXJlbSAwLjI1cmVtO1xyXG4gIH1cclxuICBcclxuICBcclxuXHJcbiAgPC9zdHlsZT5cclxuICA8dWw+XHJcbiAgICAke2RhdGEubWFwKGl0ZW0gPT4gYDxsaSBkYXRhLW51bWJlcj1cIiR7aXRlbS5udW1iZXJ9XCIgc3R5bGU9XCItLW51bWJlcjoke2l0ZW0ubnVtYmVyfTtcIj4ke2l0ZW0ubmFtZX08L2xpPmApLmpvaW4oJycpfVxyXG4gIDwvdWwgPlxyXG4gIGA7XHJcblxyXG5jbGFzcyBDb3JXb3JkQ2xvdWQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XHJcbiAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gIH1cclxufVxyXG5cclxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdjb3Itd29yZC1jbG91ZCcsIENvcldvcmRDbG91ZCk7Il0sIm5hbWVzIjpbImRhdGEiLCJ0ZW1wbGF0ZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsIm1hcCIsIml0ZW0iLCJudW1iZXIiLCJuYW1lIiwiam9pbiIsIkNvcldvcmRDbG91ZCIsIkhUTUxFbGVtZW50IiwiY29uc3RydWN0b3IiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwic2hhZG93Um9vdCIsImFwcGVuZENoaWxkIiwiY29udGVudCIsImNsb25lTm9kZSIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQ1IsQ0FDRTtBQUNFLFVBQVEsTUFEVjtBQUVFLFlBQVU7QUFGWixDQURGLEVBS0U7QUFDRSxVQUFRLEtBRFY7QUFFRSxZQUFVO0FBRlosQ0FMRixFQVNFO0FBQ0UsVUFBUSxPQURWO0FBRUUsWUFBVTtBQUZaLENBVEYsRUFhRTtBQUNFLFVBQVEsUUFEVjtBQUVFLFlBQVU7QUFGWixDQWJGLEVBaUJFO0FBQ0UsVUFBUSxTQURWO0FBRUUsWUFBVTtBQUZaLENBakJGLEVBcUJFO0FBQ0UsVUFBUSxRQURWO0FBRUUsWUFBVTtBQUZaLENBckJGLEVBeUJFO0FBQ0UsVUFBUSxLQURWO0FBRUUsWUFBVTtBQUZaLENBekJGLEVBNkJFO0FBQ0UsVUFBUSxXQURWO0FBRUUsWUFBVTtBQUZaLENBN0JGLEVBaUNFO0FBQ0UsVUFBUSxTQURWO0FBRUUsWUFBVTtBQUZaLENBakNGLEVBcUNFO0FBQ0UsVUFBUSxPQURWO0FBRUUsWUFBVTtBQUZaLENBckNGLEVBeUNFO0FBQ0UsVUFBUSxTQURWO0FBRUUsWUFBVTtBQUZaLENBekNGLEVBNkNFO0FBQ0UsVUFBUSxLQURWO0FBRUUsWUFBVTtBQUZaLENBN0NGLEVBaURFO0FBQ0UsVUFBUSxLQURWO0FBRUUsWUFBVTtBQUZaLENBakRGLEVBcURFO0FBQ0UsVUFBUSxVQURWO0FBRUUsWUFBVTtBQUZaLENBckRGLEVBeURFO0FBQ0UsVUFBUSxRQURWO0FBRUUsWUFBVTtBQUZaLENBekRGLEVBNkRFO0FBQ0UsVUFBUSxTQURWO0FBRUUsWUFBVTtBQUZaLENBN0RGLEVBaUVFO0FBQ0UsVUFBUSxPQURWO0FBRUUsWUFBVTtBQUZaLENBakVGLEVBcUVFO0FBQ0UsVUFBUSxRQURWO0FBRUUsWUFBVTtBQUZaLENBckVGLENBREY7QUE0RUEsTUFBTUMsUUFBUSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsVUFBdkIsQ0FBakI7QUFDQUYsUUFBUSxDQUFDRyxTQUFULEdBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1KLElBQUksQ0FBQ0ssR0FBTCxDQUFTQyxJQUFJLElBQUssb0JBQW1CQSxJQUFJLENBQUNDLE1BQU8scUJBQW9CRCxJQUFJLENBQUNDLE1BQU8sTUFBS0QsSUFBSSxDQUFDRSxJQUFLLE9BQWhHLEVBQXdHQyxJQUF4RyxDQUE2RyxFQUE3RyxDQUFpSDtBQUN2SDtBQUNBLEdBN0NBOztBQStDQSxNQUFNQyxZQUFOLFNBQTJCQyxXQUEzQixDQUF1QztBQUNyQ0MsRUFBQUEsV0FBVyxHQUFHO0FBQ1o7QUFDQSxTQUFLQyxZQUFMLENBQWtCO0FBQUVDLE1BQUFBLElBQUksRUFBRTtBQUFSLEtBQWxCO0FBQ0EsU0FBS0MsVUFBTCxDQUFnQkMsV0FBaEIsQ0FBNEJmLFFBQVEsQ0FBQ2dCLE9BQVQsQ0FBaUJDLFNBQWpCLENBQTJCLElBQTNCLENBQTVCO0FBQ0Q7O0FBTG9DOztBQVF2Q0MsY0FBYyxDQUFDQyxNQUFmLENBQXNCLGdCQUF0QixFQUF3Q1YsWUFBeEMifQ==
