const data = [{
  "name": "nine",
  "number": 10
}, {
  "name": "wax",
  "number": 15
}, {
  "name": "abaft",
  "number": 20
}, {
  "name": "shiver",
  "number": 25
}, {
  "name": "consist",
  "number": 30
}, {
  "name": "butter",
  "number": 35
}, {
  "name": "cup",
  "number": 40
}, {
  "name": "plausible",
  "number": 45
}, {
  "name": "delight",
  "number": 50
}, {
  "name": "stiff",
  "number": 2
}, {
  "name": "capable",
  "number": 3
}, {
  "name": "big",
  "number": 100
}, {
  "name": "way",
  "number": 88
}, {
  "name": "continue",
  "number": 63
}, {
  "name": "polish",
  "number": 42
}, {
  "name": "illegal",
  "number": 21
}, {
  "name": "drown",
  "number": 11
}, {
  "name": "scrape",
  "number": 96
}];
const template$1 = document.createElement('template');
template$1.innerHTML = `
  <style>
  :host {
    display: block;
    contain: content;
  }

  ul {
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    line-height: 2.5rem;
    list-style: none;
    padding: 0;
  }
  
  li:nth-child(2n+1) {
    --color: #181;
  }

  li:nth-child(3n+1) {
    --color: #33a;
  }

  li:nth-child(4n+1) {
    --color: #c38;
  }

  li {
    --size: calc(var(--number) * 0.08rem);

    color: var(--color);
    line-height: var(--size);
    list-style: none;
    font-size: max( 1rem, var(--size));
    padding: 0.125rem 0.25rem;
  }
  
  

  </style>
  <ul>
    ${data.map(item => `<li data-number="${item.number}" style="--number:${item.number};">${item.name}</li>`).join('')}
  </ul >
  `;

class CorWordCloud extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({
      mode: 'open'
    });
    this.shadowRoot.appendChild(template$1.content.cloneNode(true));
  }

}

customElements.define('cor-word-cloud', CorWordCloud);

const template = document.createElement('template');
template.innerHTML = `
  <style>
    span {
      align-items: center;
      background: white;
      border: solid 1px green;
      color: white;
      display: flex;
      height: 50px;
      padding-left: 2rem;
      position: relative;
      z-index: 0;
    }

    @keyframes slideInFromLeft {
      0% {
        transform: translateX(-100%);
      }
      100% {
        transform: translateX(0);
      }
    }

    span:after {
      background: green;
      content: "";
      display: block;
      height: 100%;
      position: absolute;
      left: 0;
      transition: 1s;
      transform: scaleX(calc(var(--value) * 1%));
      width: calc(var(--value) * 1%);
      z-index: -1;
    }
  </style>
  <slot></slot>
`;

class CorBarGraph extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({
      mode: 'open'
    });
    this.shadowRoot.appendChild(template.content.cloneNode(true));
  }

}

customElements.define('cor-bar-graph', CorBarGraph);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
